@import '_transformer-mixins.sass'
@import '_theme-functions.scss'


// Position

.leto-static
    +transformerConstructor('position')
        position: static

.leto-relative
    +transformerConstructor('position')
        position: relative

.leto-fixed
    +transformerConstructor('position')
        position: fixed

.leto-sticky
    +transformerConstructor('position')
        position: sticky

.leto-absolute
    +transformerConstructor('position')
        position: absolute


// Width

.leto-min-width
    +transformerConstructor('minWidth')
        min-width: $standardSize * 4

    &-xxs
        +transformerConstructor('minWidth')
            min-width: $xxs * 4

    &-xs
        +transformerConstructor('minWidth')
            min-width: $xs * 4

    &-sm
        +transformerConstructor('minWidth')
            min-width: $sm * 4

    &-md
        +transformerConstructor('minWidth')
            min-width: $md * 4

    &-lg
        +transformerConstructor('minWidth')
            min-width: $lg * 4

    &-xl
        +transformerConstructor('minWidth')
            min-width: $xl * 4

    &-xxl
        +transformerConstructor('minWidth')
            min-width: $xxl * 4

    &-full
        +transformerConstructor('minWidth')
            min-width: calc(100% - (#{$basicMargin}*2))

    &-seven-eighths
        +transformerConstructor('minWidth')
            min-width: calc(87.5% - (#{$basicMargin}*2))

    &-five-sixths
        +transformerConstructor('minWidth')
            min-width: calc(((100% / 6) * 5) - (#{$basicMargin}*2))

    &-four-fifths
        +transformerConstructor('minWidth')
            min-width: calc(80% - (#{$basicMargin}*2))

    &-three-quaters
        +transformerConstructor('minWidth')
            min-width: calc(75% - (#{$basicMargin}*2))

    &-two-thirds
        +transformerConstructor('minWidth')
            min-width: calc(66% - (#{$basicMargin}*2))

    &-five-eighths
        +transformerConstructor('minWidth')
            min-width: calc(62.5% - (#{$basicMargin}*2))

    &-three-fifths
        +transformerConstructor('minWidth')
            min-width: calc(60% - (#{$basicMargin}*2))

    &-half
        +transformerConstructor('minWidth')
            min-width: calc(50% - (#{$basicMargin}*2))

    &-three-sixths
        +transformerConstructor('minWidth')
            min-width: calc(((100% / 6) * 3) - (#{$basicMargin}*2))

    &-two-fifths
        +transformerConstructor('minWidth')
            min-width: calc(40% - (#{$basicMargin}*2))

    &-three-eighths
        +transformerConstructor('minWidth')
            min-width: calc(37.5% - (#{$basicMargin}*2))

    &-third
        +transformerConstructor('minWidth')
            min-width: calc((100% / 3) - (#{$basicMargin}*2))

    &-quater
        +transformerConstructor('minWidth')
            min-width: calc(25% - (#{$basicMargin}*2))

    &-fifth
        +transformerConstructor('minWidth')
            min-width: calc(20% - (#{$basicMargin}*2))

    &-sixth
        +transformerConstructor('minWidth')
            min-width: calc((100% / 6) - (#{$basicMargin}*2))

    &-eighth
        +transformerConstructor('minWidth')
            min-width: calc(12.5% - (#{$basicMargin}*2))

.leto-width
    +transformerConstructor('width')
        width: $standardSize * 4

    &-xxs
        +transformerConstructor('width')
            width: $xxs * 4

    &-xs
        +transformerConstructor('width')
            width: $xs * 4

    &-sm
        +transformerConstructor('width')
            width: $sm * 4

    &-md
        +transformerConstructor('width')
            width: $md * 4

    &-lg
        +transformerConstructor('width')
            width: $lg * 4

    &-xl
        +transformerConstructor('width')
            width: $xl * 4

    &-xxl
        +transformerConstructor('width')
            width: $xxl * 4

    &-full
        +transformerConstructor('width')
            width: calc(100% - (#{$basicMargin}*2))

    &-seven-eighths
        +transformerConstructor('width')
            width: calc(87.5% - (#{$basicMargin}*2))

    &-five-sixths
        +transformerConstructor('width')
            width: calc(((100% / 6) * 5) - (#{$basicMargin}*2))

    &-four-fifths
        +transformerConstructor('width')
            width: calc(80% - (#{$basicMargin}*2))

    &-three-quaters
        +transformerConstructor('width')
            width: calc(75% - (#{$basicMargin}*2))

    &-two-thirds
        +transformerConstructor('width')
            width: calc(66% - (#{$basicMargin}*2))

    &-five-eighths
        +transformerConstructor('width')
            width: calc(62.5% - (#{$basicMargin}*2))

    &-three-fifths
        +transformerConstructor('width')
            width: calc(60% - (#{$basicMargin}*2))

    &-half
        +transformerConstructor('width')
            width: calc(50% - (#{$basicMargin}*2))

    &-three-sixths
        +transformerConstructor('width')
            width: calc(((100% / 6) * 3) - (#{$basicMargin}*2))

    &-two-fifths
        +transformerConstructor('width')
            width: calc(40% - (#{$basicMargin}*2))

    &-three-eighths
        +transformerConstructor('width')
            width: calc(37.5% - (#{$basicMargin}*2))

    &-third
        +transformerConstructor('width')
            width: calc((100% / 3) - (#{$basicMargin}*2))

    &-quater
        +transformerConstructor('width')
            width: calc(25% - (#{$basicMargin}*2))

    &-fifth
        +transformerConstructor('width')
            width: calc(20% - (#{$basicMargin}*2))

    &-sixth
        +transformerConstructor('width')
            width: calc((100% / 6) - (#{$basicMargin}*2))

    &-eighth
        +transformerConstructor('width')
            width: calc(12.5% - (#{$basicMargin}*2))

.leto-max-width
    +transformerConstructor('maxWidth')
        max-width: $standardSize * 4

    &-xxs
        +transformerConstructor('maxWidth')
            max-width: $xxs * 4

    &-xs
        +transformerConstructor('maxWidth')
            max-width: $xs * 4

    &-sm
        +transformerConstructor('maxWidth')
            max-width: $sm * 4

    &-md
        +transformerConstructor('maxWidth')
            max-width: $md * 4

    &-lg
        +transformerConstructor('maxWidth')
            max-width: $lg * 4

    &-xl
        +transformerConstructor('maxWidth')
            max-width: $xl * 4

    &-xxl
        +transformerConstructor('maxWidth')
            max-width: $xxl * 4

    &-full
        +transformerConstructor('maxWidth')
            max-width: calc(100% - (#{$basicMargin}*2))

    &-seven-eighths
        +transformerConstructor('maxWidth')
            max-width: calc(87.5% - (#{$basicMargin}*2))

    &-five-sixths
        +transformerConstructor('maxWidth')
            max-width: calc(((100% / 6) * 5) - (#{$basicMargin}*2))

    &-four-fifths
        +transformerConstructor('maxWidth')
            max-width: calc(80% - (#{$basicMargin}*2))

    &-three-quaters
        +transformerConstructor('maxWidth')
            max-width: calc(75% - (#{$basicMargin}*2))

    &-two-thirds
        +transformerConstructor('maxWidth')
            max-width: calc(66% - (#{$basicMargin}*2))

    &-five-eighths
        +transformerConstructor('maxWidth')
            max-width: calc(62.5% - (#{$basicMargin}*2))

    &-three-fifths
        +transformerConstructor('maxWidth')
            max-width: calc(60% - (#{$basicMargin}*2))

    &-half
        +transformerConstructor('maxWidth')
            max-width: calc(50% - (#{$basicMargin}*2))

    &-three-sixths
        +transformerConstructor('maxWidth')
            max-width: calc(((100% / 6) * 3) - (#{$basicMargin}*2))

    &-two-fifths
        +transformerConstructor('maxWidth')
            max-width: calc(40% - (#{$basicMargin}*2))

    &-three-eighths
        +transformerConstructor('maxWidth')
            max-width: calc(37.5% - (#{$basicMargin}*2))

    &-third
        +transformerConstructor('maxWidth')
            max-width: calc((100% / 3) - (#{$basicMargin}*2))

    &-quater
        +transformerConstructor('maxWidth')
            max-width: calc(25% - (#{$basicMargin}*2))

    &-fifth
        +transformerConstructor('maxWidth')
            max-width: calc(20% - (#{$basicMargin}*2))

    &-sixth
        +transformerConstructor('maxWidth')
            max-width: calc((100% / 6) - (#{$basicMargin}*2))

    &-eighth
        +transformerConstructor('maxWidth')
            max-width: calc(12.5% - (#{$basicMargin}*2))

// Height

.leto-min-height
    +transformerConstructor('minHeight')
        min-height: $standardSize * 4

    &-xxs
        +transformerConstructor('minHeight')
            min-height: $xxs * 4

    &-xs
        +transformerConstructor('minHeight')
            min-height: $xs * 4

    &-sm
        +transformerConstructor('minHeight')
            min-height: $sm * 4

    &-md
        +transformerConstructor('minHeight')
            min-height: $md * 4

    &-lg
        +transformerConstructor('minHeight')
            min-height: $lg * 4

    &-xl
        +transformerConstructor('minHeight')
            min-height: $xl * 4

    &-xxl
        +transformerConstructor('minHeight')
            min-height: $xxl * 4

    &-full
        +transformerConstructor('minHeight')
            min-height: calc(100% - (#{$basicMargin}*2))

    &-seven-eighths
        +transformerConstructor('minHeight')
            min-height: calc(87.5% - (#{$basicMargin}*2))

    &-five-sixths
        +transformerConstructor('minHeight')
            min-height: calc(((100% / 6) * 5) - (#{$basicMargin}*2))

    &-four-fifths
        +transformerConstructor('minHeight')
            min-height: calc(80% - (#{$basicMargin}*2))

    &-three-quaters
        +transformerConstructor('minHeight')
            min-height: calc(75% - (#{$basicMargin}*2))

    &-two-thirds
        +transformerConstructor('minHeight')
            min-height: calc(66% - (#{$basicMargin}*2))

    &-five-eighths
        +transformerConstructor('minHeight')
            min-height: calc(62.5% - (#{$basicMargin}*2))

    &-three-fifths
        +transformerConstructor('minHeight')
            min-height: calc(60% - (#{$basicMargin}*2))

    &-half
        +transformerConstructor('minHeight')
            min-height: calc(50% - (#{$basicMargin}*2))

    &-three-sixths
        +transformerConstructor('minHeight')
            min-height: calc(((100% / 6) * 3) - (#{$basicMargin}*2))

    &-two-fifths
        +transformerConstructor('minHeight')
            min-height: calc(40% - (#{$basicMargin}*2))

    &-three-eighths
        +transformerConstructor('minHeight')
            min-height: calc(37.5% - (#{$basicMargin}*2))

    &-third
        +transformerConstructor('minHeight')
            min-height: calc((100% / 3) - (#{$basicMargin}*2))

    &-quater
        +transformerConstructor('minHeight')
            min-height: calc(25% - (#{$basicMargin}*2))

    &-fifth
        +transformerConstructor('minHeight')
            min-height: calc(20% - (#{$basicMargin}*2))

    &-sixth
        +transformerConstructor('minHeight')
            min-height: calc((100% / 6) - (#{$basicMargin}*2))

    &-eighth
        +transformerConstructor('minHeight')
            min-height: calc(12.5% - (#{$basicMargin}*2))

.leto-height
    +transformerConstructor('height')
        height: $standardSize * 4

    &-xxs
        +transformerConstructor('height')
            height: $xxs * 4

    &-xs
        +transformerConstructor('height')
            height: $xs * 4

    &-sm
        +transformerConstructor('height')
            height: $sm * 4

    &-md
        +transformerConstructor('height')
            height: $md * 4

    &-lg
        +transformerConstructor('height')
            height: $lg * 4

    &-xl
        +transformerConstructor('height')
            height: $xl * 4

    &-xxl
        +transformerConstructor('height')
            height: $xxl * 4

    &-full
        +transformerConstructor('height')
            height: calc(100% - (#{$basicMargin}*2))

    &-seven-eighths
        +transformerConstructor('height')
            height: calc(87.5% - (#{$basicMargin}*2))

    &-five-sixths
        +transformerConstructor('height')
            height: calc(((100% / 6) * 5) - (#{$basicMargin}*2))

    &-four-fifths
        +transformerConstructor('height')
            height: calc(80% - (#{$basicMargin}*2))

    &-three-quaters
        +transformerConstructor('height')
            height: calc(75% - (#{$basicMargin}*2))

    &-two-thirds
        +transformerConstructor('height')
            height: calc(66% - (#{$basicMargin}*2))

    &-five-eighths
        +transformerConstructor('height')
            height: calc(62.5% - (#{$basicMargin}*2))

    &-three-fifths
        +transformerConstructor('height')
            height: calc(60% - (#{$basicMargin}*2))

    &-half
        +transformerConstructor('height')
            height: calc(50% - (#{$basicMargin}*2))

    &-three-sixths
        +transformerConstructor('height')
            height: calc(((100% / 6) * 3) - (#{$basicMargin}*2))

    &-two-fifths
        +transformerConstructor('height')
            height: calc(40% - (#{$basicMargin}*2))

    &-three-eighths
        +transformerConstructor('height')
            height: calc(37.5% - (#{$basicMargin}*2))

    &-third
        +transformerConstructor('height')
            height: calc((100% / 3) - (#{$basicMargin}*2))

    &-quater
        +transformerConstructor('height')
            height: calc(25% - (#{$basicMargin}*2))

    &-fifth
        +transformerConstructor('height')
            height: calc(20% - (#{$basicMargin}*2))

    &-sixth
        +transformerConstructor('height')
            height: calc((100% / 6) - (#{$basicMargin}*2))

    &-eighth
        +transformerConstructor('height')
            height: calc(12.5% - (#{$basicMargin}*2))

.leto-max-height
    +transformerConstructor('maxHeight')
        max-height: $standardSize * 4

    &-xxs
        +transformerConstructor('maxHeight')
            max-height: $xxs * 4

    &-xs
        +transformerConstructor('maxHeight')
            max-height: $xs * 4

    &-sm
        +transformerConstructor('maxHeight')
            max-height: $sm * 4

    &-md
        +transformerConstructor('maxHeight')
            max-height: $md * 4

    &-lg
        +transformerConstructor('maxHeight')
            max-height: $lg * 4

    &-xl 
        +transformerConstructor('maxHeight')
            max-height: $xl * 4

    &-xxl
        +transformerConstructor('maxHeight')
            max-height: $xxl * 4

    &-full
        +transformerConstructor('maxHeight')
            max-height: calc(100% - (#{$basicMargin}*2))

    &-seven-eighths
        +transformerConstructor('maxHeight')
            max-height: calc(87.5% - (#{$basicMargin}*2))

    &-five-sixths
        +transformerConstructor('maxHeight')
            max-height: calc(((100% / 6) * 5) - (#{$basicMargin}*2))

    &-four-fifths
        +transformerConstructor('maxHeight')
            max-height: calc(80% - (#{$basicMargin}*2))

    &-three-quaters
        +transformerConstructor('maxHeight')
            max-height: calc(75% - (#{$basicMargin}*2))

    &-two-thirds
        +transformerConstructor('maxHeight')
            max-height: calc(66% - (#{$basicMargin}*2))

    &-five-eighths
        +transformerConstructor('maxHeight')
            max-height: calc(62.5% - (#{$basicMargin}*2))

    &-three-fifths
        +transformerConstructor('maxHeight')
            max-height: calc(60% - (#{$basicMargin}*2))

    &-half
        +transformerConstructor('maxHeight')
            max-height: calc(50% - (#{$basicMargin}*2))

    &-three-sixths
        +transformerConstructor('maxHeight')
            max-height: calc(((100% / 6) * 3) - (#{$basicMargin}*2))

    &-two-fifths
        +transformerConstructor('maxHeight')
            max-height: calc(40% - (#{$basicMargin}*2))

    &-three-eighths
        +transformerConstructor('maxHeight')
            max-height: calc(37.5% - (#{$basicMargin}*2))

    &-third
        +transformerConstructor('maxHeight')
            max-height: calc((100% / 3) - (#{$basicMargin}*2))

    &-quater
        +transformerConstructor('maxHeight')
            max-height: calc(25% - (#{$basicMargin}*2))

    &-fifth
        +transformerConstructor('maxHeight')
            max-height: calc(20% - (#{$basicMargin}*2))

    &-sixth
        +transformerConstructor('maxHeight')
            max-height: calc((100% / 6) - (#{$basicMargin}*2))

    &-eighth
        +transformerConstructor('maxHeight')
            max-height: calc(12.5% - (#{$basicMargin}*2))

// Background

.leto-bg, [class*="leto-frame"] .leto-bg

    &-white, &-white-themed
        +transformerConstructor('background')
            background-color: $colorWhite
   
    &-dark-white, &-dark-white-themed
        +transformerConstructor('background')
            background-color: $colorDarkWhite

    &-lighter-grey, &-lighter-grey-themed
        +transformerConstructor('background')
            background-color: $colorLighterGrey

    &-light-grey, &-light-grey-themed
        +transformerConstructor('background')
            background-color: $colorLightGrey

    &-grey, &-grey-themed
        +transformerConstructor('background')
            background-color: $colorGrey

    &-dark-grey, &-dark-grey-themed
        +transformerConstructor('background')
            background-color: $colorDarkGrey

    &-darker-grey, &-darker-grey-themed
        +transformerConstructor('background')
            background-color: $colorDarkerGrey

    &-light-black, &-light-black-themed
        +transformerConstructor('background')
            background-color: $colorLightBlack

    &-black, &-black-themed
        +transformerConstructor('background')
            background-color: $colorBlack

    &-light-yellow, &-light-yellow-themed
        +transformerConstructor('background')
            background-color: $colorLightYellow

    &-yellow, &-yellow-thmed
        +transformerConstructor('background')
            background-color: $colorYellow

    &-dark-yellow, &-dark-yellow-themed
        +transformerConstructor('background')
            background-color: $colorDarkYellow

    &-light-orange, &-light-orange-themed
        +transformerConstructor('background')
            background-color: $colorLightOrange

    &-orange, &-orange-themed
        +transformerConstructor('background')
            background-color: $colorOrange

    &-dark-orange, &-dark-orange-themed
        +transformerConstructor('background')
            background-color: $colorDarkOrange

    &-light-red, &-light-red-themed
        +transformerConstructor('background')
            background-color: $colorLightRed

    &-red, &-red-themed
        +transformerConstructor('background')
            background-color: $colorRed

    &-dark-red, &-dark-red-themed
        +transformerConstructor('background')
            background-color: $colorDarkRed

    &-light-purple, &-light-purple-themed
        +transformerConstructor('background')
            background-color: $colorLightPurple

    &-purple, &-purple-themed
        +transformerConstructor('background')
            background-color: $colorPurple

    &-dark-purple, &-dark-purple-themed
        +transformerConstructor('background')
            background-color: $colorDarkPurple

    &-light-blue, &-light-blue-themed
        +transformerConstructor('background')
            background-color: $colorLightBlue

    &-blue, &-blue-themed
        +transformerConstructor('background')
            background-color: $colorBlue

    &-dark-blue, &-dark-blue-themed
        +transformerConstructor('background')
            background-color: $colorDarkBlue

    &-light-mint, &-light-mint-themed
        +transformerConstructor('background')
            background-color: $colorLightMint

    &-mint, &-mint-themed
        +transformerConstructor('background')
            background-color: $colorMint

    &-dark-mint, &-dark-mint-themed
        +transformerConstructor('background')
            background-color: $colorDarkMint

    &-light-green, &-light-green-themed
        +transformerConstructor('background')
            background-color: $colorLightGreen

    &-green, &-green-themed
        +transformerConstructor('background')
            background-color: $colorGreen

    &-dark-green, &-dark-green-themed
        +transformerConstructor('background')
            background-color: $colorDarkGreen
    
    &-none 
        +transformerConstructor('background') 
            background-color: transparent

[class*='leto-bg-white-themed'], [class*="leto-frame"] [class*='leto-bg-white-themed']
    +transformerColorConstructor('background', $colorWhite) 

[class*='leto-bg-dark-white-themed'], [class*="leto-frame"] [class*='leto-bg-dark-white-themed']
    +transformerColorConstructor('background', $colorDarkWhite)

[class*='leto-bg-lighter-grey-themed'], [class*="leto-frame"] [class*='leto-bg-lighter-grey-themed']
    +transformerColorConstructor('background', $colorLighterGrey)

[class*='leto-bg-light-grey-themed'], [class*="leto-frame"] [class*='leto-bg-light-grey-themed']
    +transformerColorConstructor('background', $colorLightGrey)

[class*='leto-bg-grey-themed'], [class*="leto-frame"] [class*='leto-bg-grey-themed']
    +transformerColorConstructor('background', $colorGrey)

[class*='leto-bg-dark-grey-themed'], [class*="leto-frame"] [class*='leto-bg-dark-grey-themed']
    +transformerColorConstructor('background', $colorDarkGrey)

[class*='leto-bg-darker-grey-themed'], [class*="leto-frame"] [class*='leto-bg-darker-grey-themed']
    +transformerColorConstructor('background', $colorDarkerGrey)

[class*='leto-bg-light-black-themed'], [class*="leto-frame"] [class*='leto-bg-light-black-themed']
    +transformerColorConstructor('background', $colorLightBlack) 

[class*='leto-bg-black-themed'], [class*="leto-frame"] [class*='leto-bg-black-themed']
    +transformerColorConstructor('background', $colorBlack)

[class*='leto-bg-light-yellow-themed'], [class*="leto-frame"] [class*='leto-bg-light-yellow-themed']
    +transformerColorConstructor('background', $colorLightYellow)

[class*='leto-bg-yellow-themed'], [class*="leto-frame"] [class*='leto-bg-yellow-themed']
    +transformerColorConstructor('background', $colorYellow)

[class*='leto-bg-dark-yellow-themed'], [class*="leto-frame"] [class*='leto-bg-dark-yellow-themed']
    +transformerColorConstructor('background', $colorDarkYellow)

[class*='leto-bg-light-orange-themed'], [class*="leto-frame"] [class*='leto-bg-light-orange-themed']
    +transformerColorConstructor('background', $colorLightOrange)

[class*='leto-bg-orange-themed'], [class*="leto-frame"] [class*='leto-bg-orange-themed']
    +transformerColorConstructor('background', $colorOrange)

[class*='leto-bg-dark-orange-themed'], [class*="leto-frame"] [class*='leto-bg-dark-orange-themed']
    +transformerColorConstructor('background', $colorDarkOrange)

[class*='leto-bg-light-red-themed'], [class*="leto-frame"] [class*='leto-bg-light-red-themed']
    +transformerColorConstructor('background', $colorLightRed)

[class*='leto-bg-red-themed'], [class*="leto-frame"] [class*='leto-bg-red-themed']
    +transformerColorConstructor('background', $colorRed)

[class*='leto-bg-dark-red-themed'], [class*="leto-frame"] [class*='leto-bg-dark-red-themed']
    +transformerColorConstructor('background', $colorDarkRed)

[class*='leto-bg-light-purple-themed'], [class*="leto-frame"] [class*='leto-bg-light-purple-themed']
    +transformerColorConstructor('background', $colorLightPurple)

[class*='leto-bg-purple-themed'], [class*="leto-frame"] [class*='leto-bg-purple-themed']
    +transformerColorConstructor('background', $colorPurple)

[class*='leto-bg-dark-purple-themed'], [class*="leto-frame"] [class*='leto-bg-dark-purple-themed']
    +transformerColorConstructor('background', $colorDarkPurple)

[class*='leto-bg-light-blue-themed'], [class*="leto-frame"] [class*='leto-bg-light-blue-themed']
    +transformerColorConstructor('background', $colorLightBlue)

[class*='leto-bg-blue-themed'], [class*="leto-frame"] [class*='leto-bg-blue-themed']
    +transformerColorConstructor('background', $colorBlue)

[class*='leto-bg-dark-blue-themed'], [class*="leto-frame"] [class*='leto-bg-dark-blue-themed']
    +transformerColorConstructor('background', $colorDarkBlue)

[class*='leto-bg-light-mint-themed'], [class*="leto-frame"] [class*='leto-bg-light-mint-themed']
    +transformerColorConstructor('background', $colorLightMint)

[class*='leto-bg-mint-themed'], [class*="leto-frame"] [class*='leto-bg-mint-themed']
    +transformerColorConstructor('background', $colorMint)

[class*='leto-bg-dark-mint-themed'], [class*="leto-frame"] [class*='leto-bg-dark-mint-themed']
    +transformerColorConstructor('background', $colorDarkMint)

[class*='leto-bg-light-green-themed'], [class*="leto-frame"] [class*='leto-bg-light-green-themed']
    +transformerColorConstructor('background', $colorLightGreen)

[class*='leto-bg-green-themed'], [class*="leto-frame"] [class*='leto-bg-green-themed']
    +transformerColorConstructor('background', $colorGreen)

[class*='leto-bg-dark-green-themed'], [class*="leto-frame"] [class*='leto-bg-dark-green-themed']
    +transformerColorConstructor('background', $colorDarkGreen)
 

// Border

.leto-border, [class*="leto-frame"] .leto-border
    +transformerConstructor('border')
        border: 1px solid $colorGrey

    &-horizontal
        +transformerConstructor('border')
            border-top: 1px solid $colorGrey
            border-bottom: 1px solid $colorGrey

    &-vertical
        +transformerConstructor('border')
            border-left: 1px solid $colorGrey
            border-right: 1px solid $colorGrey

    &-top
        +transformerConstructor('border')
            border-top: 1px solid $colorGrey

    &-left
        +transformerConstructor('border')
            border-left: 1px solid $colorGrey

    &-right
        +transformerConstructor('border')
            border-right: 1px solid $colorGrey

    &-bottom
        +transformerConstructor('border')
            border-bottom: 1px solid $colorGrey

    &-white, &-white-themed
        +transformerConstructor('border')
            border-color: $colorWhite
   
    &-dark-white, &-dark-white-themed
        +transformerConstructor('border')
            border-color: $colorDarkWhite

    &-lighter-grey, &-lighter-grey-themed
        +transformerConstructor('border')
            border-color: $colorLighterGrey

    &-light-grey, &-light-grey-themed
        +transformerConstructor('border')
            border-color: $colorLightGrey

    &-grey, &-grey-themed
        +transformerConstructor('border')
            border-color: $colorGrey

    &-dark-grey, &-dark-grey-themed
        +transformerConstructor('border')
            border-color: $colorDarkGrey

    &-darker-grey, &-darker-grey-themed
        +transformerConstructor('border')
            border-color: $colorDarkerGrey

    &-light-black, &-light-black-themed
        +transformerConstructor('border')
            border-color: $colorLightBlack

    &-black, &-black-themed
        +transformerConstructor('border')
            border-color: $colorBlack

    &-light-yellow, &-light-yellow-themed
        +transformerConstructor('border')
            border-color: $colorLightYellow

    &-yellow, &-yellow-thmed
        +transformerConstructor('border')
            border-color: $colorYellow

    &-dark-yellow, &-dark-yellow-themed
        +transformerConstructor('border')
            border-color: $colorDarkYellow

    &-light-orange, &-light-orange-themed
        +transformerConstructor('border')
            border-color: $colorLightOrange

    &-orange, &-orange-themed
        +transformerConstructor('border')
            border-color: $colorOrange

    &-dark-orange, &-dark-orange-themed
        +transformerConstructor('border')
            border-color: $colorDarkOrange

    &-light-red, &-light-red-themed
        +transformerConstructor('border')
            border-color: $colorLightRed

    &-red, &-red-themed
        +transformerConstructor('border')
            border-color: $colorRed

    &-dark-red, &-dark-red-themed
        +transformerConstructor('border')
            border-color: $colorDarkRed

    &-light-purple, &-light-purple-themed
        +transformerConstructor('border')
            border-color: $colorLightPurple

    &-purple, &-purple-themed
        +transformerConstructor('border')
            border-color: $colorPurple

    &-dark-purple, &-dark-purple-themed
        +transformerConstructor('border')
            border-color: $colorDarkPurple

    &-light-blue, &-light-blue-themed
        +transformerConstructor('border')
            border-color: $colorLightBlue

    &-blue, &-blue-themed
        +transformerConstructor('border')
            border-color: $colorBlue

    &-dark-blue, &-dark-blue-themed
        +transformerConstructor('border')
            border-color: $colorDarkBlue

    &-light-mint, &-light-mint-themed
        +transformerConstructor('border')
            border-color: $colorLightMint

    &-mint, &-mint-themed
        +transformerConstructor('border')
            border-color: $colorMint

    &-dark-mint, &-dark-mint-themed
        +transformerConstructor('border')
            border-color: $colorDarkMint

    &-light-green, &-light-green-themed
        +transformerConstructor('border')
            border-color: $colorLightGreen

    &-green, &-green-themed
        +transformerConstructor('border')
            border-color: $colorGreen

    &-dark-green, &-dark-green-themed
        +transformerConstructor('border')
            border-color: $colorDarkGreen

    &-none
        +transformerConstructor('border')
            border: none
        
[class*='leto-border-white-themed'], [class*="leto-frame"] [class*='leto-border-white-themed']
    +transformerColorConstructor('border', $colorWhite) 

[class*='leto-border-dark-white-themed'], [class*="leto-frame"] [class*='leto-border-dark-white-themed']
    +transformerColorConstructor('border', $colorDarkWhite)

[class*='leto-border-lighter-grey-themed'], [class*="leto-frame"] [class*='leto-border-lighter-grey-themed']
    +transformerColorConstructor('border', $colorLighterGrey)

[class*='leto-border-light-grey-themed'], [class*="leto-frame"] [class*='leto-border-light-grey-themed']
    +transformerColorConstructor('border', $colorLightGrey)

[class*='leto-border-grey-themed'], [class*="leto-frame"] [class*='leto-border-grey-themed']
    +transformerColorConstructor('border', $colorGrey)

[class*='leto-border-dark-grey-themed'], [class*="leto-frame"] [class*='leto-border-dark-grey-themed']
    +transformerColorConstructor('border', $colorDarkGrey)

[class*='leto-border-darker-grey-themed'], [class*="leto-frame"] [class*='leto-border-darker-grey-themed']
    +transformerColorConstructor('border', $colorDarkerGrey)

[class*='leto-border-light-black-themed'], [class*="leto-frame"] [class*='leto-border-light-black-themed']
    +transformerColorConstructor('border', $colorLightBlack) 

[class*='leto-border-black-themed'], [class*="leto-frame"] [class*='leto-border-black-themed']
    +transformerColorConstructor('border', $colorBlack)

[class*='leto-border-light-yellow-themed'], [class*="leto-frame"] [class*='leto-border-light-yellow-themed']
    +transformerColorConstructor('border', $colorLightYellow)

[class*='leto-border-yellow-themed'], [class*="leto-frame"] [class*='leto-border-yellow-themed']
    +transformerColorConstructor('border', $colorYellow)

[class*='leto-border-dark-yellow-themed'], [class*="leto-frame"] [class*='leto-border-dark-yellow-themed']
    +transformerColorConstructor('border', $colorDarkYellow)

[class*='leto-border-light-orange-themed'], [class*="leto-frame"] [class*='leto-border-light-orange-themed']
    +transformerColorConstructor('border', $colorLightOrange)

[class*='leto-border-orange-themed'], [class*="leto-frame"] [class*='leto-border-orange-themed']
    +transformerColorConstructor('border', $colorOrange)

[class*='leto-border-dark-orange-themed'], [class*="leto-frame"] [class*='leto-border-dark-orange-themed']
    +transformerColorConstructor('border', $colorDarkOrange)

[class*='leto-border-light-red-themed'], [class*="leto-frame"] [class*='leto-border-light-red-themed']
    +transformerColorConstructor('border', $colorLightRed)

[class*='leto-border-red-themed'], [class*="leto-frame"] [class*='leto-border-red-themed']
    +transformerColorConstructor('border', $colorRed)

[class*='leto-border-dark-red-themed'], [class*="leto-frame"] [class*='leto-border-dark-red-themed']
    +transformerColorConstructor('border', $colorDarkRed)

[class*='leto-border-light-purple-themed'], [class*="leto-frame"] [class*='leto-border-light-purple-themed']
    +transformerColorConstructor('border', $colorLightPurple)

[class*='leto-border-purple-themed'], [class*="leto-frame"] [class*='leto-border-purple-themed']
    +transformerColorConstructor('border', $colorPurple)

[class*='leto-border-dark-purple-themed'], [class*="leto-frame"] [class*='leto-border-dark-purple-themed']
    +transformerColorConstructor('border', $colorDarkPurple)

[class*='leto-border-light-blue-themed'], [class*="leto-frame"] [class*='leto-border-light-blue-themed']
    +transformerColorConstructor('border', $colorLightBlue)

[class*='leto-border-blue-themed'], [class*="leto-frame"] [class*='leto-border-blue-themed']
    +transformerColorConstructor('border', $colorBlue)

[class*='leto-border-dark-blue-themed'], [class*="leto-frame"] [class*='leto-border-dark-blue-themed']
    +transformerColorConstructor('border', $colorDarkBlue)

[class*='leto-border-light-mint-themed'], [class*="leto-frame"] [class*='leto-border-light-mint-themed']
    +transformerColorConstructor('border', $colorLightMint)

[class*='leto-border-mint-themed'], [class*="leto-frame"] [class*='leto-border-mint-themed']
    +transformerColorConstructor('border', $colorMint)

[class*='leto-border-dark-mint-themed'], [class*="leto-frame"] [class*='leto-border-dark-mint-themed']
    +transformerColorConstructor('border', $colorDarkMint)

[class*='leto-border-light-green-themed'], [class*="leto-frame"] [class*='leto-border-light-green-themed']
    +transformerColorConstructor('border', $colorLightGreen)

[class*='leto-border-green-themed'], [class*="leto-frame"] [class*='leto-border-green-themed']
    +transformerColorConstructor('border', $colorGreen)

[class*='leto-border-dark-green-themed'], [class*="leto-frame"] [class*='leto-border-dark-green-themed']
    +transformerColorConstructor('border', $colorDarkGreen)


// Roundness

.leto-roundness
    +transformerConstructor('roundness')
        border-radius: $standardSize

    &-xxs
        +transformerConstructor('roundness')
            border-radius: $xxs 

    &-xs
        +transformerConstructor('roundness')
            border-radius: $xs

    &-sm
        +transformerConstructor('roundness')
            border-radius: $sm

    &-md
        +transformerConstructor('roundness')
            border-radius: $md

    &-lg
        +transformerConstructor('roundness')
            border-radius: $lg

    &-xl
        +transformerConstructor('roundness')
            border-radius: $xl

    &-xxl
        +transformerConstructor('roundness')
            border-radius: $xxl

    &-full
        +transformerConstructor('roundness')
            border-radius: 1000px

    &-top
        +transformerConstructor('roundness')
            border-radius: $standardSize $standardSize 0 0 

        &-xxs
            +transformerConstructor('roundness')
                border-radius: $xxs $xxs 0 0 

        &-xs
            +transformerConstructor('roundness')
                border-radius: $xs $xs 0 0

        &-sm
            +transformerConstructor('roundness')
                border-radius: $sm $sm 0 0

        &-md
            +transformerConstructor('roundness')
                border-radius: $md $md 0 0

        &-lg
            +transformerConstructor('roundness')
                border-radius: $lg $lg 0 0

        &-xl
            +transformerConstructor('roundness')
                border-radius: $xl $xl 0 0

        &-xxl
            +transformerConstructor('roundness')
                border-radius: $xxl $xxl 0 0

        &-full
            +transformerConstructor('roundness')
                border-radius: 1000px 1000px 0 0

        &-none
            border-top-left-radius: 0
            border-top-right-radius: 0

    &-left
        +transformerConstructor('roundness')
            border-radius: $standardSize 0 0 0 

        &-xxs
            +transformerConstructor('roundness')
                border-radius: $xxs 0 0 0 

        &-xs
            +transformerConstructor('roundness')
                border-radius: $xs 0 0 0

        &-sm
            +transformerConstructor('roundness')
                border-radius: $sm 0 0 0

        &-md
            +transformerConstructor('roundness')
                border-radius: $md 0 0 0

        &-lg
            +transformerConstructor('roundness')
                border-radius: $lg 0 0 0

        &-xl
            +transformerConstructor('roundness')
                border-radius: $xl 0 0 0

        &-xxl
            +transformerConstructor('roundness')
                border-radius: $xxl 0 0 0

        &-full
            border-radius: 1000px 0 0 0

        &-none
            border-top-left-radius: 0
    
    &-right
        +transformerConstructor('roundness')
            border-radius: 0 $standardSize 0 0 

        &-xxs
            +transformerConstructor('roundness')
                border-radius: 0 $xxs 0 0

        &-xs
            +transformerConstructor('roundness')
                border-radius: 0 $xs 0 0

        &-sm
            +transformerConstructor('roundness')
                border-radius: 0 $sm 0 0

        &-md
            +transformerConstructor('roundness')
                border-radius: 0 $md 0 0

        &-lg
            +transformerConstructor('roundness')
                border-radius: 0 $lg 0 0

        &-xl
            +transformerConstructor('roundness')
                border-radius: 0 $xl 0 0

        &-xxl
            +transformerConstructor('roundness')
                border-radius: 0 $xxl 0 0

        &-full
            +transformerConstructor('roundness')
                border-radius: 0 1000px 0 0

        &-none
            border-top-right-radius: 0

    &-bottom
        +transformerConstructor('roundness')
            border-radius: 0 0 $standardSize $standardSize 

        &-xxs
            +transformerConstructor('roundness')
                border-radius: 0 0 $xxs $xxs

        &-xs
            +transformerConstructor('roundness')
                border-radius: 0 0 $xs $xs 

        &-sm
            +transformerConstructor('roundness')
                border-radius: 0 0 $sm $sm

        &-md
            +transformerConstructor('roundness')
                border-radius: 0 0 $md $md

        &-lg
            +transformerConstructor('roundness')
                border-radius: 0 0 $lg $lg 

        &-xl
            +transformerConstructor('roundness')
                border-radius: 0 0 $xl $xl 

        &-xxl
            +transformerConstructor('roundness')
                border-radius: 0 0 $xxl $xxl

        &-full
            +transformerConstructor('roundness')
                border-radius: 0 0 1000px 1000px

        &-none
            border-bottom-left-radius: 0 
            border-bottom-right-radius: 0

    &-none
        border-radius: 0


// Text        

.leto-text, [class*="leto-frame"] .leto-text
    +transformerConstructor('text')
        font-size: $fontSizeMD

    &-xxs
        +transformerConstructor('text')
            font-size: $fontSizeXXS

    &-xs
        +transformerConstructor('text')
            font-size: $fontSizeXS

    &-sm
        +transformerConstructor('text')
            font-size: $fontSizeSM

    &-md
        +transformerConstructor('text')
            font-size: $fontSizeMD

    &-lg
        +transformerConstructor('text')
            font-size: $fontSizeLG

    &-xl
        +transformerConstructor('text')
            font-size: $fontSizeXL

    &-xxl
        +transformerConstructor('text')
            font-size: $fontSizeXXL

    &-light
        +transformerConstructor('text')
            font-weight: $fontWeightLight

    &-regular
        +transformerConstructor('text')
            font-weight: $fontWeightRegular

    &-medium
        +transformerConstructor('text')
            font-weight: $fontWeightMedium

    &-bold
        +transformerConstructor('text')
            font-weight: $fontWeightBold

    &-bolder
        +transformerConstructor('text')
            font-weight: $fontWeightBlack

    &-italic
        +transformerConstructor('text')
            font-style: italic

    &-uppercase
        +transformerConstructor('text')
            text-transform: uppercase

    &-ellipsis
        +transformerConstructor('text')
            white-space: nowrap
            overflow: hidden
            text-overflow: ellipsis

    &-link
        +transformerConstructor('text')
            color: $linkColor
            cursor: pointer

            &:hover 
                color: $linkHoverColor

    &-left
        +transformerConstructor('text')
            text-align: left

    &-center
        +transformerConstructor('text')
            text-align: center
        
    &-right
        +transformerConstructor('text')
            text-align: right

    &-white, &-white-themed
        +transformerConstructor('text')
            color: $colorWhite
   
    &-dark-white, &-dark-white-themed
        +transformerConstructor('text')
            color: $colorDarkWhite

    &-lighter-grey, &-lighter-grey-themed
        +transformerConstructor('text')
            color: $colorLighterGrey

    &-light-grey, &-light-grey-themed
        +transformerConstructor('text')
            color: $colorLightGrey

    &-grey, &-grey-themed
        +transformerConstructor('text')
            color: $colorGrey

    &-dark-grey, &-dark-grey-themed
        +transformerConstructor('text')
            color: $colorDarkGrey

    &-darker-grey, &-darker-grey-themed
        +transformerConstructor('text')
            color: $colorDarkerGrey

    &-light-black, &-light-black-themed
        +transformerConstructor('text')
            color: $colorLightBlack

    &-black, &-black-themed
        +transformerConstructor('text')
            color: $colorBlack

    &-light-yellow, &-light-yellow-themed
        +transformerConstructor('text')
            color: $colorLightYellow

    &-yellow, &-yellow-thmed
        +transformerConstructor('text')
            color: $colorYellow

    &-dark-yellow, &-dark-yellow-themed
        +transformerConstructor('text')
            color: $colorDarkYellow

    &-light-orange, &-light-orange-themed
        +transformerConstructor('text')
            color: $colorLightOrange

    &-orange, &-orange-themed
        +transformerConstructor('text')
            color: $colorOrange

    &-dark-orange, &-dark-orange-themed
        +transformerConstructor('text')
            color: $colorDarkOrange

    &-light-red, &-light-red-themed
        +transformerConstructor('text')
            color: $colorLightRed

    &-red, &-red-themed
        +transformerConstructor('text')
            color: $colorRed

    &-dark-red, &-dark-red-themed
        +transformerConstructor('text')
            color: $colorDarkRed

    &-light-purple, &-light-purple-themed
        +transformerConstructor('text')
            color: $colorLightPurple

    &-purple, &-purple-themed
        +transformerConstructor('text')
            color: $colorPurple

    &-dark-purple, &-dark-purple-themed
        +transformerConstructor('text')
            color: $colorDarkPurple

    &-light-blue, &-light-blue-themed
        +transformerConstructor('text')
            color: $colorLightBlue

    &-blue, &-blue-themed
        +transformerConstructor('text')
            color: $colorBlue

    &-dark-blue, &-dark-blue-themed
        +transformerConstructor('text')
            color: $colorDarkBlue

    &-light-mint, &-light-mint-themed
        +transformerConstructor('text')
            color: $colorLightMint

    &-mint, &-mint-themed
        +transformerConstructor('text')
            color: $colorMint

    &-dark-mint, &-dark-mint-themed
        +transformerConstructor('text')
            color: $colorDarkMint

    &-light-green, &-light-green-themed
        +transformerConstructor('text')
            color: $colorLightGreen

    &-green, &-green-themed
        +transformerConstructor('text')
            color: $colorGreen

    &-dark-green, &-dark-green-themed
        +transformerConstructor('text')
            color: $colorDarkGreen

    &-none
        +transformerConstructor('text')
            color: transparent

[class*='leto-text-white-themed'], [class*="leto-frame"] [class*='leto-text-white-themed']
    +transformerColorConstructor('text', $colorWhite) 

[class*='leto-text-dark-white-themed'], [class*="leto-frame"] [class*='leto-text-dark-white-themed']
    +transformerColorConstructor('text', $colorDarkWhite)

[class*='leto-text-lighter-grey-themed'], [class*="leto-frame"] [class*='leto-text-lighter-grey-themed']
    +transformerColorConstructor('text', $colorLighterGrey)

[class*='leto-text-light-grey-themed'], [class*="leto-frame"] [class*='leto-text-light-grey-themed']
    +transformerColorConstructor('text', $colorLightGrey)

[class*='leto-text-grey-themed'], [class*="leto-frame"] [class*='leto-text-grey-themed']
    +transformerColorConstructor('text', $colorGrey)

[class*='leto-text-dark-grey-themed'], [class*="leto-frame"] [class*='leto-text-dark-grey-themed']
    +transformerColorConstructor('text', $colorDarkGrey)

[class*='leto-text-darker-grey-themed'], [class*="leto-frame"] [class*='leto-text-darker-grey-themed']
    +transformerColorConstructor('text', $colorDarkerGrey)

[class*='leto-text-light-black-themed'], [class*="leto-frame"] [class*='leto-text-light-black-themed']
    +transformerColorConstructor('text', $colorLightBlack) 

[class*='leto-text-black-themed'], [class*="leto-frame"] [class*='leto-text-black-themed']
    +transformerColorConstructor('text', $colorBlack)

[class*='leto-text-light-yellow-themed'], [class*="leto-frame"] [class*='leto-text-light-yellow-themed']
    +transformerColorConstructor('text', $colorLightYellow)

[class*='leto-text-yellow-themed'], [class*="leto-frame"] [class*='leto-text-yellow-themed']
    +transformerColorConstructor('text', $colorYellow)

[class*='leto-text-dark-yellow-themed'], [class*="leto-frame"] [class*='leto-text-dark-yellow-themed']
    +transformerColorConstructor('text', $colorDarkYellow)

[class*='leto-text-light-orange-themed'], [class*="leto-frame"] [class*='leto-text-light-orange-themed']
    +transformerColorConstructor('text', $colorLightOrange)

[class*='leto-text-orange-themed'], [class*="leto-frame"] [class*='leto-text-orange-themed']
    +transformerColorConstructor('text', $colorOrange)

[class*='leto-text-dark-orange-themed'], [class*="leto-frame"] [class*='leto-text-dark-orange-themed']
    +transformerColorConstructor('text', $colorDarkOrange)

[class*='leto-text-light-red-themed'], [class*="leto-frame"] [class*='leto-text-light-red-themed']
    +transformerColorConstructor('text', $colorLightRed)

[class*='leto-text-red-themed'], [class*="leto-frame"] [class*='leto-text-red-themed']
    +transformerColorConstructor('text', $colorRed)

[class*='leto-text-dark-red-themed'], [class*="leto-frame"] [class*='leto-text-dark-red-themed']
    +transformerColorConstructor('text', $colorDarkRed)

[class*='leto-text-light-purple-themed'], [class*="leto-frame"] [class*='leto-text-light-purple-themed']
    +transformerColorConstructor('text', $colorLightPurple)

[class*='leto-text-purple-themed'], [class*="leto-frame"] [class*='leto-text-purple-themed']
    +transformerColorConstructor('text', $colorPurple)

[class*='leto-text-dark-purple-themed'], [class*="leto-frame"] [class*='leto-text-dark-purple-themed']
    +transformerColorConstructor('text', $colorDarkPurple)

[class*='leto-text-light-blue-themed'], [class*="leto-frame"] [class*='leto-text-light-blue-themed']
    +transformerColorConstructor('text', $colorLightBlue)

[class*='leto-text-blue-themed'], [class*="leto-frame"] [class*='leto-text-blue-themed']
    +transformerColorConstructor('text', $colorBlue)

[class*='leto-text-dark-blue-themed'], [class*="leto-frame"] [class*='leto-text-dark-blue-themed']
    +transformerColorConstructor('text', $colorDarkBlue)

[class*='leto-text-light-mint-themed'], [class*="leto-frame"] [class*='leto-text-light-mint-themed']
    +transformerColorConstructor('text', $colorLightMint)

[class*='leto-text-mint-themed'], [class*="leto-frame"] [class*='leto-text-mint-themed']
    +transformerColorConstructor('text', $colorMint)

[class*='leto-text-dark-mint-themed'], [class*="leto-frame"] [class*='leto-text-dark-mint-themed']
    +transformerColorConstructor('text', $colorDarkMint)

[class*='leto-text-light-green-themed'], [class*="leto-frame"] [class*='leto-text-light-green-themed']
    +transformerColorConstructor('text', $colorLightGreen)

[class*='leto-text-green-themed'], [class*="leto-frame"] [class*='leto-text-green-themed']
    +transformerColorConstructor('text', $colorGreen)

[class*='leto-text-dark-green-themed'], [class*="leto-frame"] [class*='leto-text-dark-green-themed']
    +transformerColorConstructor('text', $colorDarkGreen)


// Margin

.leto-m, .leto-margin
    +transformerConstructor('margin')
        +margin($standardSize)

    &-xxs
        +transformerConstructor('margin')
            +margin($xxs / 2)

    &-xs
        +transformerConstructor('margin')
            +margin($xs * (2 / 3))

    &-sm
        +transformerConstructor('margin')
            +margin($sm)

    &-md
        +transformerConstructor('margin')
            +margin($md)

    &-lg
        +transformerConstructor('margin')
            +margin($lg)

    &-xl
        +transformerConstructor('margin')
            +margin($xl)

    &-xxl
        +transformerConstructor('margin')
            +margin($xxl)

    &-none
        +transformerConstructor('margin')
            +margin(0)

    &-balance
        +transformerConstructor('margin')
            +marginBalance($standardSize)

        &-xxs
            +transformerConstructor('margin')
                +marginBalance($xxs / 2)

        &-xs
            +transformerConstructor('margin')
                +marginBalance($xs * (2 / 3))

        &-sm
            +transformerConstructor('margin')
                +marginBalance($sm)

        &-md
            +transformerConstructor('margin')
                +marginBalance($md)

        &-lg
            +transformerConstructor('margin')
                +marginBalance($lg)

        &-xl
            +transformerConstructor('margin')
                +marginBalance($xl)

        &-xxl
            +transformerConstructor('margin')
                +marginBalance($xxl)

.leto-mh, .leto-margin-horizontal
    +transformerConstructor('margin')
        +marginX($standardSize)

    &-xxs
        +transformerConstructor('margin')
            +marginX($xxs / 2)

    &-xs
        +transformerConstructor('margin')
            +marginX($xs * (2 / 3))

    &-sm
        +transformerConstructor('margin')
            +marginX($sm)

    &-md
        +transformerConstructor('margin')
            +marginX($md)

    &-lg
        +transformerConstructor('margin')
            +marginX($lg)

    &-xl
        +transformerConstructor('margin')
            +marginX($xl)

    &-xxl
        +transformerConstructor('margin')
            +marginX($xxl)

    &-none
        +transformerConstructor('margin')
            +marginX(0)

    &-balance
        +transformerConstructor('margin')
            +marginXBalance($standardSize)

        &-xxs
            +transformerConstructor('margin')
                +marginXBalance($xxs / 2)

        &-xs
            +transformerConstructor('margin')
                +marginXBalance($xs * (2 / 3))

        &-sm
            +transformerConstructor('margin')
                +marginXBalance($sm)

        &-md
            +transformerConstructor('margin')
                +marginXBalance($md)

        &-lg
            +transformerConstructor('margin')
                +marginXBalance($lg)

        &-xl
            +transformerConstructor('margin')
                +marginXBalance($xl)

        &-xxl
            +transformerConstructor('margin')
                +marginXBalance($xxl)
  
.leto-mv, .leto-margin-vertical
    +transformerConstructor('margin')
        +marginY($standardSize)

    &-xxs
        +transformerConstructor('margin')
            +marginY($xxs / 2)

    &-xs
        +transformerConstructor('margin')
            +marginY($xs * (2 / 3))

    &-sm
        +transformerConstructor('margin')
            +marginY($sm)

    &-md
        +transformerConstructor('margin')
            +marginY($md)

    &-lg
        +transformerConstructor('margin')
            +marginY($lg)

    &-xl
        +transformerConstructor('margin')
            +marginY($xl)

    &-xxl
        +transformerConstructor('margin')
            +marginY($xxl)

    &-none
        +transformerConstructor('margin')
            +marginY(0)

    &-balance
        +transformerConstructor('margin')
            +marginYBalance($standardSize)

        &-xxs
            +transformerConstructor('margin')
                +marginYBalance($xxs / 2)

        &-xs
            +transformerConstructor('margin')
                +marginYBalance($xs * (2 / 3))

        &-sm
            +transformerConstructor('margin')
                +marginYBalance($sm)

        &-md
            +transformerConstructor('margin')
                +marginYBalance($md)

        &-lg
            +transformerConstructor('margin')
                +marginYBalance($lg)

        &-xl
            +transformerConstructor('margin')
                +marginYBalance($xl)

        &-xxl
            +transformerConstructor('margin')
                +marginYBalance($xxl)

.leto-mt, .leto-margin-top
    +transformerConstructor('margin')
        +marginTop($standardSize)

    &-xxs
        +transformerConstructor('margin')
            +marginTop($xxs / 2)

    &-xs
        +transformerConstructor('margin')
            +marginTop($xs * (2 / 3))

    &-sm
        +transformerConstructor('margin')
            +marginTop($sm)

    &-md
        +transformerConstructor('margin')
            +marginTop($md)

    &-lg
        +transformerConstructor('margin')
            +marginTop($lg)

    &-xl
        +transformerConstructor('margin')
            +marginTop($xl)

    &-xxl
        +transformerConstructor('margin')
            +marginTop($xxl)

    &-none
        +transformerConstructor('margin')
            +marginTop(0)

    &-balance
        +transformerConstructor('margin')
            +marginTopBalance($standardSize)

        &-xxs
            +transformerConstructor('margin')
                +marginTopBalance($xxs / 2)

        &-xs
            +transformerConstructor('margin')
                +marginTopBalance($xs * (2 / 3))

        &-sm
            +transformerConstructor('margin')
                +marginTopBalance($sm)

        &-md
            +transformerConstructor('margin')
                +marginTopBalance($md)

        &-lg
            +transformerConstructor('margin')
                +marginTopBalance($lg)

        &-xl
            +transformerConstructor('margin')
                +marginTopBalance($xl)

        &-xxl
            +transformerConstructor('margin')
                +marginTopBalance($xxl)

.leto-ml, .leto-margin-left
    +transformerConstructor('margin')
        +marginLeft($standardSize)

    &-xxs
        +transformerConstructor('margin')
            +marginLeft($xxs / 2)

    &-xs
        +transformerConstructor('margin')
            +marginLeft($xs * (2 / 3))

    &-sm
        +transformerConstructor('margin')
            +marginLeft($sm)

    &-md
        +transformerConstructor('margin')
            +marginLeft($md)

    &-lg
        +transformerConstructor('margin')
            +marginLeft($lg)

    &-xl
        +transformerConstructor('margin')
            +marginLeft($xl)

    &-xxl
        +transformerConstructor('margin')
            +marginLeft($xxl)

    &-none
        +transformerConstructor('margin')
            +marginLeft(0)

    &-balance
        +transformerConstructor('margin')
            +marginLeftBalance($standardSize)

        &-xxs
            +transformerConstructor('margin')
                +marginLeftBalance($xxs / 2)

        &-xs
            +transformerConstructor('margin')
                +marginLeftBalance($xs * (2 / 3))

        &-sm
            +transformerConstructor('margin')
                +marginLeftBalance($sm)

        &-md
            +transformerConstructor('margin')
                +marginLeftBalance($md)

        &-lg
            +transformerConstructor('margin')
                +marginLeftBalance($lg)

        &-xl
            +transformerConstructor('margin')
                +marginLeftBalance($xl)

        &-xxl
            +transformerConstructor('margin')
                +marginLeftBalance($xxl)


.leto-mr, .leto-margin-right
    +transformerConstructor('margin')
        +marginRight($standardSize)

    &-xxs
        +transformerConstructor('margin')
            +marginRight($xxs / 2)

    &-xs
        +transformerConstructor('margin')
            +marginRight($xs * (2 / 3))

    &-sm
        +transformerConstructor('margin')
            +marginRight($sm)

    &-md
        +transformerConstructor('margin')
            +marginRight($md)

    &-lg
        +transformerConstructor('margin')
            +marginRight($lg)

    &-xl
        +transformerConstructor('margin')
            +marginRight($xl)

    &-xxl
        +transformerConstructor('margin')
            +marginRight($xxl)

    &-none
        +transformerConstructor('margin')
            +marginRight(0)

    &-balance
        +transformerConstructor('margin')
            +marginRightBalance($standardSize)

        &-xxs
            +transformerConstructor('margin')
                +marginRightBalance($xxs / 2)

        &-xs
            +transformerConstructor('margin')
                +marginRightBalance($xs * (2 / 3))

        &-sm
            +transformerConstructor('margin')
                +marginRightBalance($sm)

        &-md
            +transformerConstructor('margin')
                +marginRightBalance($md)

        &-lg
            +transformerConstructor('margin')
                +marginRightBalance($lg)

        &-xl
            +transformerConstructor('margin')
                +marginRightBalance($xl)

        &-xxl
            +transformerConstructor('margin')
                +marginRightBalance($xxl)

.leto-mb, .leto-margin-bottom
    +transformerConstructor('margin')
        +marginBottom($standardSize)

    &-xxs
        +transformerConstructor('margin')
            +marginBottom($xxs / 2)

    &-xs
        +transformerConstructor('margin')
            +marginBottom($xs * (2 / 3))

    &-sm
        +transformerConstructor('margin')
            +marginBottom($sm)

    &-md
        +transformerConstructor('margin')
            +marginBottom($md)

    &-lg
        +transformerConstructor('margin')
            +marginBottom($lg)

    &-xl
        +transformerConstructor('margin')
            +marginBottom($xl)

    &-xxl
        +transformerConstructor('margin')
            +marginBottom($xxl)

    &-none
        +transformerConstructor('margin')
            +marginBottom(0)

    &-balance
        +transformerConstructor('margin')
            +marginBottomBalance($standardSize)

        &-xxs
            +transformerConstructor('margin')
                +marginBottomBalance($xxs / 2)

        &-xs
            +transformerConstructor('margin')
                +marginBottomBalance($xs * (2 / 3))

        &-sm
            +transformerConstructor('margin')
                +marginBottomBalance($sm)

        &-md
            +transformerConstructor('margin')
                +marginBottomBalance($md)

        &-lg
            +transformerConstructor('margin')
                +marginBottomBalance($lg)

        &-xl
            +transformerConstructor('margin')
                +marginBottomBalance($xl)

        &-xxl
            +transformerConstructor('margin')
                +marginBottomBalance($xxl)


// Padding

.leto-p, .leto-padding
    +transformerConstructor('padding')
        +padding($standardSize)

    &-xxs
        +transformerConstructor('padding')
            +padding($xxs / 2)

    &-xs
        +transformerConstructor('padding')
            +padding($xs * (2 / 3))

    &-sm
        +transformerConstructor('padding')
            +padding($sm)

    &-md
        +transformerConstructor('padding')
            +padding($md)

    &-lg
        +transformerConstructor('padding')
            +padding($lg)

    &-xl
        +transformerConstructor('padding')
            +padding($xl)

    &-xxl
        +transformerConstructor('padding')
            +padding($xxl)

    &-none
        +transformerConstructor('padding')
            +padding(0)

.leto-ph, .leto-padding-horizontal
    +transformerConstructor('padding')
        +paddingX($standardSize)

    &-xxs
        +transformerConstructor('padding')
            +paddingX($xxs / 2)

    &-xs
        +transformerConstructor('padding')
            +paddingX($xs * (2 / 3))

    &-sm
        +transformerConstructor('padding')
            +paddingX($sm)

    &-md
        +transformerConstructor('padding')
            +paddingX($md)

    &-lg
        +transformerConstructor('padding')
            +paddingX($lg)

    &-xl
        +transformerConstructor('padding')
            +paddingX($xl)

    &-xxl
        +transformerConstructor('padding')
            +paddingX($xxl)

    &-none
        +transformerConstructor('padding')
            +paddingX(0)
  
.leto-pv, .leto-padding-vertical
    +transformerConstructor('padding')
        +paddingY($standardSize)

    &-xxs
        +transformerConstructor('padding')
            +paddingY($xxs / 2)

    &-xs
        +transformerConstructor('padding')
            +paddingY($xs * (2 / 3))

    &-sm
        +transformerConstructor('padding')
            +paddingY($sm)

    &-md
        +transformerConstructor('padding')
            +paddingY($md)

    &-lg
        +transformerConstructor('padding')
            +paddingY($lg)

    &-xl
        +transformerConstructor('padding')
            +paddingY($xl)

    &-xxl
        +transformerConstructor('padding')
            +paddingY($xxl)

    &-none
        +transformerConstructor('padding')
            +paddingY(0)

.leto-pt, .leto-padding-top
    +transformerConstructor('padding')
        +paddingTop($standardSize)

    &-xxs
        +transformerConstructor('padding')
            +paddingTop($xxs / 2)

    &-xs
        +transformerConstructor('padding')
            +paddingTop($xs * (2 / 3))

    &-sm
        +transformerConstructor('padding')
            +paddingTop($sm)

    &-md
        +transformerConstructor('padding')
            +paddingTop($md)

    &-lg
        +transformerConstructor('padding')
            +paddingTop($lg)

    &-xl
        +transformerConstructor('padding')
            +paddingTop($xl)

    &-xxl
        +transformerConstructor('padding')
            +paddingTop($xxl)

    &-none
        +transformerConstructor('padding')
            +paddingTop(0)

.leto-pl, .leto-padding-left
    +transformerConstructor('padding')
        +paddingLeft($standardSize)

    &-xxs
        +transformerConstructor('padding')
            +paddingLeft($xxs / 2)

    &-xs
        +transformerConstructor('padding')
            +paddingLeft($xs * (2 / 3))

    &-sm
        +transformerConstructor('padding')
            +paddingLeft($sm)

    &-md
        +transformerConstructor('padding')
            +paddingLeft($md)

    &-lg
        +transformerConstructor('padding')
            +paddingLeft($lg)

    &-xl
        +transformerConstructor('padding')
            +paddingLeft($xl)

    &-xxl
        +transformerConstructor('padding')
            +paddingLeft($xxl)

    &-none
        +transformerConstructor('padding')
            +paddingLeft(0)

.leto-pr, .leto-padding-right
    +transformerConstructor('padding')
        +paddingRight($standardSize)

    &-xxs
        +transformerConstructor('padding')
            +paddingRight($xxs / 2)

    &-xs
        +transformerConstructor('padding')
            +paddingRight($xs * (2 / 3))

    &-sm
        +transformerConstructor('padding')
            +paddingRight($sm)

    &-md
        +transformerConstructor('padding')
            +paddingRight($md)

    &-lg
        +transformerConstructor('padding')
            +paddingRight($lg)

    &-xl
        +transformerConstructor('padding')
            +paddingRight($xl)

    &-xxl
        +transformerConstructor('padding')
            +paddingRight($xxl)

    &-none
        +transformerConstructor('padding')
            +paddingRight(0)

.leto-pb, .leto-padding-bottom
    +transformerConstructor('padding')
        +paddingBottom($standardSize)

    &-xxs
        +transformerConstructor('padding')
            +paddingBottom($xxs / 2)

    &-xs
        +transformerConstructor('padding')
            +paddingBottom($xs)

    &-sm
        +transformerConstructor('padding')
            +paddingBottom($sm)

    &-md
        +transformerConstructor('padding')
            +paddingBottom($md)

    &-lg
        +transformerConstructor('padding')
            +paddingBottom($lg)

    &-xl
        +transformerConstructor('padding')
            +paddingBottom($xl)

    &-xxl
        +transformerConstructor('padding')
            +paddingBottom($xxl)

    &-none
        +transformerConstructor('padding')
            +paddingBottom(0)


// Overflow

.leto-overflow-scroll
    +transformerConstructor('overflow')
        overflow: scroll

.leto-overflow-hidden
    +transformerConstructor('overflow')
        overflow: hidden

.leto-overflow-auto
    +transformerConstructor('overflow')
        overflow: auto

.leto-overflow-y-hidden
    +transformerConstructor('overflow')
        overflow-y: hidden

.leto-overflow-y-scroll
    +transformerConstructor('overflow')
        overflow-y: scroll

.leto-overflow-y-auto
    +transformerConstructor('overflow')
        overflow-y: auto

.leto-overflow-x-hidden
    +transformerConstructor('overflow')
        overflow-x: hidden

.leto-overflow-x-scroll
    +transformerConstructor('overflow')
        overflow-x: scroll 

.leto-overflow-x-auto
    +transformerConstructor('overflow')
        overflow-x: auto


// Opacity

.leto-invisible
    opacity: 0


// Display

.leto-block   
    +transformerConstructor('display')
        display: block

.leto-inline-block   
    +transformerConstructor('display')
        display: inline-block

.leto-inline   
    +transformerConstructor('display')
        display: inline

.leto-flex   
    +transformerConstructor('display')
        display: flex

.leto-inline-flex
    +transformerConstructor('display')
        display: inline-flex

.leto-hidden   
    +transformerConstructor('display')
        display: hidden


// Index

.leto-index // check

    &-1
        +transformerConstructor('index')
            z-index: 1

    &-2
        +transformerConstructor('index')
            z-index: 2

    &-3
        +transformerConstructor('index')
            z-index: 3

    &-4
        +transformerConstructor('index')
            z-index: 4

    &-5
        +transformerConstructor('index')
            z-index: 5

    &-6
        +transformerConstructor('index')
            z-index: 6

    &-7
        +transformerConstructor('index')
            z-index: 7

    &-8
        +transformerConstructor('index')
            z-index: 8

    &-9
        +transformerConstructor('index')
            z-index: 9

    &-10
        +transformerConstructor('index')
            z-index: 10

    &-11
        +transformerConstructor('index')
            z-index: 11

    &-12
        +transformerConstructor('index')
            z-index: 12

    &-13
        +transformerConstructor('index')
            z-index: 13

    &-14
        +transformerConstructor('index')
            z-index: 14

    &-15
        +transformerConstructor('index')
            z-index: 15

    &-16
        +transformerConstructor('index')
            z-index: 16

    &-17
        +transformerConstructor('index')
            z-index: 17

    &-18
        +transformerConstructor('index')
            z-index: 18

    &-19
        +transformerConstructor('index')
            z-index: 19

    &-20
        +transformerConstructor('index')
            z-index: 20


// Disabled

.leto-disabled
    +transformerConstructor('disabled')
        background-color: $colorLightGrey !important
        border-color: $colorLightGrey !important
        color: $colorDarkGrey !important
        pointer-events: none

        &::placeholder
        color: $colorDarkGrey !important 


// Click

.leto-click
    +transformerConstructor('click')
        cursor: pointer


// No Link

.leto-no-link
    +transformerConstructor('noLink')
        color: $colorBlack
        text-decoration: none
        pointer-events: none

        &-style
            color: $colorBlack
            text-decoration: none


// Active

.leto-active
    +transformerConstructor('active')
        +active($colorGrey)

    &-white
        +transformerConstructor('active')
            +active($colorWhite)
   
    &-dark-white
        +transformerConstructor('active')
            +active($colorDarkWhite)

    &-lighter-grey
        +transformerConstructor('active')
            +active($colorLighterGrey)

    &-light-grey
        +transformerConstructor('active')
            +active($colorLightGrey)

    &-grey
        +transformerConstructor('active')
            +active($colorGrey)

    &-dark-grey
        +transformerConstructor('active')
            +active($colorDarkGrey)

    &-darker-grey
        +transformerConstructor('active')
            +active($colorDarkerGrey)

    &-light-black
        +transformerConstructor('active')
            +active($colorLightBlack)

    &-black
        +transformerConstructor('active')
            +active($colorBlack)

    &-light-yellow
        +transformerConstructor('active')
            +active($colorLightYellow)

    &-yellow
        +transformerConstructor('active')
            +active($colorYellow)

    &-dark-yellow
        +transformerConstructor('active')
            +active($colorDarkYellow)

    &-light-orange
        +transformerConstructor('active')
            +active($colorLightOrange)

    &-orange
        +transformerConstructor('active')
            +active($colorOrange)

    &-dark-orange
        +transformerConstructor('active')
            +active($colorDarkOrange)

    &-light-red
        +transformerConstructor('active')
            +active($colorLightRed)

    &-red
        +transformerConstructor('active')
            +active($colorRed)

    &-dark-red
        +transformerConstructor('active')
            +active($colorDarkRed)

    &-light-purple
        +transformerConstructor('active')
            +active($colorLightPurple)

    &-purple
        +transformerConstructor('active')
            +active($colorPurple)

    &-dark-purple
        +transformerConstructor('active')
            +active($colorDarkPurple)

    &-light-blue
        +transformerConstructor('active')
            +active($colorLightBlue)

    &-blue
        +transformerConstructor('active')
            +active($colorBlue)

    &-dark-blue
        +transformerConstructor('active')
            +active($colorDarkBlue)

    &-light-mint
        +transformerConstructor('active')
            +active($colorLightMint)

    &-mint
        +transformerConstructor('active')
            +active($colorMint)

    &-dark-mint
        +transformerConstructor('active')
            +active($colorDarkMint)

    &-light-green
        +transformerConstructor('active')
            +active($colorLightGreen)

    &-green
        +transformerConstructor('active')
            +active($colorGreen)

    &-dark-green
        +transformerConstructor('active')
            +active($colorDarkGreen)


// Hover

.leto-hover
    +transformerConstructor('hover')
        +hover($colorGrey)

    &-white
        +transformerConstructor('hover')
            +hover($colorWhite)
   
    &-dark-white
        +transformerConstructor('hover')
            +hover($colorDarkWhite)

    &-lighter-grey
        +transformerConstructor('hover')
            +hover($colorLighterGrey)

    &-light-grey
        +transformerConstructor('hover')
            +hover($colorLightGrey)

    &-grey
        +transformerConstructor('hover')
            +hover($colorGrey)

    &-dark-grey
        +transformerConstructor('hover')
            +hover($colorDarkGrey)

    &-darker-grey
        +transformerConstructor('hover')
            +hover($colorDarkerGrey)

    &-light-black
        +transformerConstructor('hover')
            +hover($colorLightBlack)

    &-black
        +transformerConstructor('hover')
            +hover($colorBlack)

    &-light-yellow
        +transformerConstructor('hover')
            +hover($colorLightYellow)

    &-yellow
        +transformerConstructor('hover')
            +hover($colorYellow)

    &-dark-yellow
        +transformerConstructor('hover')
            +hover($colorDarkYellow)

    &-light-orange
        +transformerConstructor('hover')
            +hover($colorLightOrange)

    &-orange
        +transformerConstructor('hover')
            +hover($colorOrange)

    &-dark-orange
        +transformerConstructor('hover')
            +hover($colorDarkOrange)

    &-light-red
        +transformerConstructor('hover')
            +hover($colorLightRed)

    &-red
        +transformerConstructor('hover')
            +hover($colorRed)

    &-dark-red
        +transformerConstructor('hover')
            +hover($colorDarkRed)

    &-light-purple
        +transformerConstructor('hover')
            +hover($colorLightPurple)

    &-purple
        +transformerConstructor('hover')
            +hover($colorPurple)

    &-dark-purple
        +transformerConstructor('hover')
            +hover($colorDarkPurple)

    &-light-blue
        +transformerConstructor('hover')
            +hover($colorLightBlue)

    &-blue
        +transformerConstructor('hover')
            +hover($colorBlue)

    &-dark-blue
        +transformerConstructor('hover')
            +hover($colorDarkBlue)

    &-light-mint
        +transformerConstructor('hover')
            +hover($colorLightMint)

    &-mint
        +transformerConstructor('hover')
            +hover($colorMint)

    &-dark-mint
        +transformerConstructor('hover')
            +hover($colorDarkMint)

    &-light-green
        +transformerConstructor('hover')
            +hover($colorLightGreen)

    &-green
        +transformerConstructor('hover')
            +hover($colorGreen)

    &-dark-green
        +transformerConstructor('hover')
            +hover($colorDarkGreen)